version: '3.9'

x-kafka-env: &kafka-env
  KAFKA_DEFAULT_REPLICATION_FACTOR: 3
  KAFKA_NUM_PARTITIONS: 3
  ALLOW_PLAINTEXT_LISTENER: "yes"
  KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: ms-schema-registry:8081
  KAFKA_ZOOKEEPER_CONNECT: ms-zookeeper-1:2181,ms-zookeeper-2:2182,ms-zookeeper-3:2183
  KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

x-zookeeper-env: &zookeeper-env
  ZOOKEEPER_CLIENT_PORT: 2181
  ZOOKEEPER_TICK_TIME: 2000
  ZOOKEEPER_SERVERS: ms-zookeeper-1:2888:3888;ms-zookeeper-2:2888:3888;ms-zookeeper-3:2888:3888

services:
  # -------------------- Zookeeper -------------------- #
  zookeeper-1:
    container_name: ms-zookeeper-1
    image: "confluentinc/cp-zookeeper:${CONFLUENT_KAFKA_TAG}"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      <<: *zookeeper-env
      
  zookeeper-2:
    container_name: ms-zookeeper-2
    image: "confluentinc/cp-zookeeper:${CONFLUENT_KAFKA_TAG}"
    environment:
      ZOOKEEPER_SERVER_ID: 2
      <<: *zookeeper-env

  zookeeper-3:
    container_name: ms-zookeeper-3
    image: "confluentinc/cp-zookeeper:${CONFLUENT_KAFKA_TAG}"
    environment:
      ZOOKEEPER_SERVER_ID: 3
      <<: *zookeeper-env

  # -------------------- Kafka brokers -------------------- #
  kafka-1:
    container_name: ms-kafka-1
    image: "confluentinc/cp-kafka:${CONFLUENT_KAFKA_TAG}"
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ms-kafka-1:9092
      <<: *kafka-env

  kafka-2:
    container_name: ms-kafka-2
    image: "confluentinc/cp-kafka:${CONFLUENT_KAFKA_TAG}"
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    ports:
      - 9093:9093
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ms-kafka-2:9093
      <<: *kafka-env

  kafka-3:
    container_name: ms-kafka-3
    image: "confluentinc/cp-kafka:${CONFLUENT_KAFKA_TAG}"
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    ports:
      - 9094:9094
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ms-kafka-3:9094
      <<: *kafka-env

  # -------------------- Schema Registry -------------------- #
  schema-registry:
    image: "confluentinc/cp-schema-registry:${CONFLUENT_KAFKA_TAG}"
    container_name: ms-schema-registry
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: ms-kafka-1:9092
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 3
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  # -------------------- Kafka Admin UI -------------------- #
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ms-kafka-admin-ui
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - 8080:8080
    environment:
      AUTH_TYPE: LOGIN_FORM
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: password
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_ZOOKEEPER: ms-zookeeper-1:2181
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ms-kafka-1:9092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://ms-schema-registry:8081
      # KAFKA_CLUSTERS_0_SCHEMANAMETEMPLATE: "%s-schema" # Map topics to schemas, e.g. topic 'person' will use schema 'person-schema' (is it working?)

  # -------------------- Microservices -------------------- #
  python-srv:
    container_name: ms-python-app
    depends_on:
      - schema-registry
    build:
      context: ./python-srv

  vehicles-stock:
    container_name: ms-vehicles-stock
    depends_on:
      - schema-registry
      - vehicles-stock-db
    build:
      context: ./vehicles-stock-nestjs
    ports:
      - 3002:3002

  # -------------------- Databases -------------------- #
  vehicles-stock-db:
    image: postgres:latest
    container_name: ms-vehicles-stock-db
    expose:
      - 5432
    volumes:
      - ms-postgres:/var/lib/postgresql/data
      - ./sql/vehicles-stock-init.sql:/docker-entrypoint-initdb.d/vehicles-stock-init.sql
    environment:
      POSTGRES_USER: ${VEHICLES_STOCK_DB_USR}
      POSTGRES_PASSWORD: ${VEHICLES_STOCK_DB_PWD}

volumes:
  ms-postgres:
